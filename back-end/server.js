#!/usr/bin/env node
const express = require('express')
const app = express()
const server = require('http').Server(app) // load up the web server
const io = require('socket.io')(server)
const port = 5000 // the port to listen to for incoming requests
const path = require("path");

/*
//sends chatroom.html on / 
app.get("/", (req, res) => {
 res.sendFile(path.join(__dirname, "public", "chatroom.html"));
});*/


// uuidV4() generates unique identifier 
const { v4:uuidV4 } = require('uuid')

// sets how we are going to render our views *ejs is disabled for our project :/
//app.set('view engine'. 'ejs')

// sets up express javascript and css files. we're not using line below as the tutorial is just backend and ejs template, doesnt allow for frontend
//app.use(express.static('public'))

// when createRoom called generate a unique uuid and reroute to it 
app.get('/createRoom', (req, res) => {
  res.redirect(`/${uuidV4()}`)
})


// when createRoom called generate a unique uuid and reroute to it 
app.get('/', (req, res) => {
  res.redirect(`/${uuidV4()}`)
})

// renders page with unique uuid generated by createRoom
app.get('/:room', (req, res) => {
  res.render('room', { roomId:req.params.room })
})

//when new user enters room pass its socket to server. 
io.on('connection', socket => {
  //event listener join-room
  socket.on('join-room', (roomId, userId) => {
   console.log(roomId, userId)
  })
})


// call express's listen function to start listening to the port
const listener = server.listen(port, function () {
  console.log(`Server running on port: ${port}`)
})

// a function to stop listening to the port
const close = () => {
  listener.close()
}

module.exports = {
  close: close,
}